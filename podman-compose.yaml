networks:
  app-network:
    driver: bridge

services:
  rabbitmq:
    image: docker.io/rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ic-tester
      RABBITMQ_DEFAULT_PASS: ic-tester
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq:Z  # persist data and give SELinux a shared label
    user: "999:999"  # Run as rabbitmq user
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  blob-based-event-handler:
    build:
      context: ./BlobBasedEventHandler
    image: localhost/sandboxtest/blob-based-event-handler:latest
    networks:
      - app-network
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ic-tester
      RABBITMQ_PASS: ic-tester
      RABBITMQ_PORT: 5672
      AZURITE_CONNECTION_STRING: "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;"
    depends_on:
      rabbitmq:
        condition: service_healthy
      azurite:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import pika; pika.BlockingConnection(pika.ConnectionParameters('rabbitmq', 5672, credentials=pika.PlainCredentials('ic-tester', 'ic-tester')))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  keda-test-scaler:
    build:
      context: ./KedaTestScaler
    image: localhost/sandboxtest/keda-test-scaler:latest
    network_mode: host  # Use host network to access Podman API
    environment:
      CONTAINER_HOST: tcp://127.0.0.1:8888  # Podman remote API
      RABBITMQ_HOST: localhost  # Using localhost since we're in host network
      RABBITMQ_USER: ic-tester
      RABBITMQ_PASS: ic-tester
      RABBITMQ_API: http://localhost:15672/api/queues/%2F/blob.events
      PROCESSOR_IMAGE: localhost/sandboxtest/blob-processor:latest
      APP_NETWORK: podman-scaler-sandbox_app-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:15672/api/overview', auth=('ic-tester', 'ic-tester'))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # If you are running **rootless Podman on another host**, adjust the UID portion accordingly.

  # blob-processor service removed - now managed dynamically by keda-test-scaler
  # Each processor instance handles exactly one message then terminates

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - azurite-data:/data:Z
    command: azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --location /data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z 0.0.0.0 10000"]
      interval: 30s
      timeout: 10s
      retries: 3

  azurite-init:
    build:
      context: ./azurite-init
    image: localhost/sandboxtest/azurite-init:latest
    networks:
      - app-network
    depends_on:
      azurite:
        condition: service_healthy
    environment:
      - AZURITE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;
    restart: "no"

volumes:
  azurite-data:
  rabbitmq-data: